#! /usr/bin/env python

import sys
import traceback
import getopt

import doit
from doit import main

# usage="usage: %prog [options] [task] [task] ...",
# "-f", "--file", default="dodo.py", help="load task from dodo FILE [default: %default]")

#"-v", "--verbosity", default=0,
# help="""0 capture (do not print) stdout/stderr from task. \t
#         1 capture stdout only. \t
#         2 dont capture anything (print everything immediately). \t
#                           [default: %default]""")

# "-a", "--always-execute" help="always execute tasks even if up-to-date [default: %default]")

# "list"  help="list tasks from dodo file")
# --list-all"  help="list all tasks and sub-tasks from dodo file")


class SubCommand(object):
    """
    @ivar name (string)
    """
    def __init__(self, name, options, do_cmd):
        self.name = name
        self.options = options
        self.do_cmd = do_cmd
        self.params = {} #values for parameters
        self.args = None

    def get_short(self):
        short_list = ""
        for opt in self.options:
            if not opt['short']:
                continue
            short_list += opt['short']
            if opt['type'] is not bool:
                short_list += ':'
        return short_list

    def get_long(self):
        long_list = []
        for opt in self.options:
            long = opt['long']
            if not long:
                continue
            if opt['type'] is not bool:
                long += '='
            long_list.append(long)
        return long_list

    def get_option(self, opt_str):
        for opt in self.options:
            if opt_str in ('-' + opt['short'], '--' + opt['long']):
                return opt

    def __call__(self, in_args, **kwargs):
        # global parameters (got from main command options)
        self.params.update(kwargs)

        try:
            opts,args = getopt.getopt(in_args,self.get_short(),self.get_long())
        except getopt.GetoptError, err:
            print str(err)
            print "not like this %s" % self.name
            return 2

        for opt in self.options:
            self.params[opt['name']] = opt['default']

        for opt, val in opts:
            this = self.get_option(opt)
            if this['type'] is bool:
                self.params[this['name']] = True
            else:
                self.params[this['name']] = this['type'](val)

        self.args = args
        return self.do_cmd(self)





def main_cmd():

    opt_dodo ={'name': 'dodoFile',
               'short':'f',
               'long': 'file',
               'type': str,
               'default': 'dodo.py'}

    subCmd = {}
    run_options = [opt_dodo,
        {'name': 'version',
         'short':'',
         'long': 'version',
         'type': bool,
         'default': False},
        {'name': 'help',
         'short':'',
         'long': 'help',
         'type': bool,
         'default': False},
        {'name': 'dep_file',
         'short':'',
         'long': '',
         'type': str,
         'default': ".doit.dbm"},
        {'name':'always',
         'short':'a',
         'long':'always-execute',
         'type':bool,
         'default': False},
        {'name':'verbosity',
         'short':'v',
         'long':'verbosity',
         'type':int,
         'default': 0}
        ]

    def run_cmd(self):
        # special parameters that dont run anything
        if self.params["version"]:
            print ".".join([str(i) for i in doit.__version__])
            return 0
        if self.params["help"]:
            print "usage help"
            return 0


        # check if run command
        # default command is "run"
        if len(self.args) == 0 or self.args[0] not in self.params['sub']:
            filter_ = self.args
            task_list = main.load_task_generators(self.params['dodoFile'])
            return main.cmd_run(self.params['dep_file'], task_list, filter_, self.params['verbosity'], self.params['always'])

        # sub cmd provided on cmd line. parse arguments again
        sub_cmd = self.args.pop(0)
        return self.params['sub'][sub_cmd](self.args, dodoFile=self.params['dodoFile'])

    subCmd['run'] = SubCommand('run', run_options, run_cmd)

    ##########################

    list_options = [opt_dodo,
        {'name': 'all',
         'short':'',
         'long': 'all',
         'type': bool,
         'default': False}]

    def list_cmd(self):
        task_list = main.load_task_generators(self.params['dodoFile'])
        return main.cmd_list(task_list, self.params['all'])

    subCmd['list'] = SubCommand('list', list_options, list_cmd)

    ###########################

    try:
        return subCmd['run'](sys.argv[1:],sub=subCmd)

    # make sure exception is printed out. we migth have redirected stderr
    except Exception, e:
        sys.__stderr__.write(traceback.format_exc())
        return 1


if __name__ == "__main__":
    sys.exit(main_cmd())


#FIXME better error message when there is no dodo file.
# "                         when task doesnt exist.
